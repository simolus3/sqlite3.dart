name: Download and compile SQLite

on:
  workflow_call:
    outputs:
      artifact_id:
        description: "ID of the artifact containing prebuilt SQLite libraries"
        value: ${{ jobs.merge_assets.outputs.artifact }}

jobs:
  download_sqlite:
    runs-on: ubuntu-latest
    name: Download SQLite sources
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        id: cache_build
        with:
          path: sqlite-src/
          key: sqlite-src-${{ hashFiles('tool/sqlite_build_id') }}

      - uses: dart-lang/setup-dart@v1
        if: steps.cache_build.outputs.cache-hit != 'true'
        with:
          sdk: beta

      - name: Download sqlite3
        if: steps.cache_build.outputs.cache-hit != 'true'
        run: |
          dart run tool/download_sqlite.dart

      - name: Upload sqlite3 sources
        uses: actions/upload-artifact@v4
        with:
          name: sqlite3-src
          path: sqlite-src/
          if-no-files-found: error
          retention-days: 1

  build_sqlite:
    needs: [download_sqlite]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    name: Compile sqlite3
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache@v4
        id: cache_build
        with:
          path: out/
          key: sqlite-prebuilt-${{ runner.os }}-${{ hashFiles('tool/sqlite_build_id') }}

      - name: Download sqlite3 sources
        if: steps.cache_build.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v4
        with:
          name: sqlite3-src
          path: sqlite3-src

      - uses: dart-lang/setup-dart@v1
        if: steps.cache_build.outputs.cache-hit != 'true'
        with:
          sdk: beta

      - name: Compile sqlite3
        if: steps.cache_build.outputs.cache-hit != 'true'
        run: |
          dart pub get
          dart run tool/build_sqlite.dart

      - name: Upload sqlite3 binaries
        uses: actions/upload-artifact@v4
        with:
          name: sqlite3-libs-${{ runner.os }}
          path: sqlite-compiled
          if-no-files-found: error
          retention-days: 1

  compile_wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        id: cache_build
        with:
          path: sqlite3_wasm_build/out/
          key: sqlite-prebuilt-wasm2-${{ hashFiles('tool/sqlite_build_id') }}

      - name: Download WASI SDK
        if: steps.cache_build.outputs.cache-hit != 'true'
        run: |
          curl -L https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-27/wasi-sdk-27.0-x86_64-linux.deb -o wasi-sdk.deb
          sudo dpkg -i wasi-sdk.deb
          sudo apt install lld
          sudo mkdir /usr/lib/llvm-18/lib/clang/18/lib/wasi
          sudo cp /opt/wasi-sdk/lib/clang/20/lib/wasm32-unknown-wasi/libclang_rt.builtins.a /usr/lib/llvm-18/lib/clang/18/lib/wasi/libclang_rt.builtins-wasm32.a

          curl -L https://github.com/WebAssembly/binaryen/releases/download/version_124/binaryen-version_124-x86_64-linux.tar.gz -o binaryen.tar.gz
          tar --extract --gzip --file binaryen.tar.gz
          sudo mv binaryen-version_124/bin/* /usr/local/bin

      - uses: dart-lang/setup-dart@v1
        if: steps.cache_build.outputs.cache-hit != 'true'
        with:
          sdk: beta

      - name: Compile WASM binaries
        if: steps.cache_build.outputs.cache-hit != 'true'
        working-directory: sqlite3_wasm_build/
        run: |
          cmake -Dwasi_sysroot=/opt/wasi-sdk/share/wasi-sysroot/ -S src -B .dart_tool/sqlite_build
          cmake --build .dart_tool/sqlite_build/ -t output -j

      - name: Upload sqlite3 binaries
        uses: actions/upload-artifact@v4
        with:
          name: sqlite3-libs-${{ runner.os }}-${{ matrix.arch }}
          path: sqlite3_wasm_build/out/
          if-no-files-found: error
          retention-days: 1

  merge_assets:
    runs-on: ubuntu-latest
    needs: [build_sqlite, compile_wasm]
    name: Merge prebuilt libraries into single directory
    outputs:
      artifact: ${{ steps.upload.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v5
        with:
          path: out/
          merge-multiple: true
          pattern: sqlite3-libs-*

      - run: ls -al out/

      - name: Upload final binaries
        uses: actions/upload-artifact@v4
        id: upload
        with:
          name: sqlite3-precompiled
          path: out/
          if-no-files-found: error
          retention-days: 1
