import 'dart:io';

import 'package:crypto/crypto.dart';
import 'package:path/path.dart' as p;

/// A GH actions step will download all sqlite3 binaries attached to a release
/// to `sqlite/out`.
///
/// This program replaces `sqlite3/lib/src/hook/asset_hashes.dart` to reference
/// those hashes.
void main(List<String> args) {
  final releaseTag = switch (args) {
    [] => null,
    [final arg] => arg,
    _ => throw ArgumentError.value(
        args.join(' '), 'args', 'Must be empty or the tag'),
  };

  final buffer = StringBuffer('''
// Generated by tool/write_asset_hashes.dart

// dart format off
const String? releaseTag = ${releaseTag == null ? 'null' : "'$releaseTag'"};

const Map<String, String> assetNameToSha256Hash = {
''');

  for (final entry in Directory('sqlite/out').listSync()) {
    if (entry is File) {
      final name = p.basename(entry.path);
      final hash = sha256.convert(entry.readAsBytesSync());

      buffer.writeln("  '$name': '$hash',");
    }
  }

  buffer.writeln('};');

  File('sqlite3/lib/src/hook/asset_hashes.dart')
      .writeAsStringSync(buffer.toString());
}
