// ignore_for_file: type=lint
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

final class sqlite3_char extends ffi.Opaque {}

final class sqlite3 extends ffi.Opaque {}

final class sqlite3_stmt extends ffi.Opaque {}

final class sqlite3_backup extends ffi.Opaque {}

final class sqlite3_api_routines extends ffi.Opaque {}

final class sqlite3_value extends ffi.Opaque {}

final class sqlite3_context extends ffi.Opaque {}

final class sqlite3_io_methods extends ffi.Struct {
  @ffi.Int()
  external int iVersion;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_file>)>>
      xClose;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_file>, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Int64)>> xRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_file>, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Int64)>> xWrite;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_file>, ffi.Int64)>> xTruncate;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_file>, ffi.Int)>>
      xSync;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_file>, ffi.Pointer<ffi.Int64>)>> xFileSize;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_file>, ffi.Int)>>
      xLock;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_file>, ffi.Int)>>
      xUnlock;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3_file>, ffi.Pointer<ffi.Int>)>>
      xCheckReservedLock;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3_file>, ffi.Int, ffi.Pointer<ffi.Void>)>>
      xFileControl;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_file>)>>
      xSectorSize;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_file>)>>
      xDeviceCharacteristics;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_file>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>> xShmMap;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_file>, ffi.Int, ffi.Int, ffi.Int)>> xShmLock;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_file>)>>
      xShmBarrier;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_file>, ffi.Int)>>
      xShmUnmap;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_file>, ffi.Int64, ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>> xFetch;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3_file>, ffi.Int64, ffi.Pointer<ffi.Void>)>>
      xUnfetch;
}

final class sqlite3_file extends ffi.Struct {
  external ffi.Pointer<sqlite3_io_methods> pMethods;
}

final class sqlite3_vfs extends ffi.Struct {
  @ffi.Int()
  external int iVersion;

  @ffi.Int()
  external int szOsFile;

  @ffi.Int()
  external int mxPathname;

  external ffi.Pointer<sqlite3_vfs> pNext;

  external ffi.Pointer<ffi.Char> zName;

  external ffi.Pointer<ffi.Void> pAppData;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<sqlite3_file>, ffi.Int, ffi.Pointer<ffi.Int>)>> xOpen;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      xDelete;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Pointer<ffi.Int>)>> xAccess;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Pointer<ffi.Char>)>> xFullPathname;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Char>)>> xDlOpen;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<sqlite3_vfs>, ffi.Int, ffi.Pointer<ffi.Char>)>>
      xDlError;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> Function(
              ffi.Pointer<sqlite3_vfs>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>> xDlSym;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Void>)>> xDlClose;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3_vfs>, ffi.Int, ffi.Pointer<ffi.Char>)>>
      xRandomness;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<sqlite3_vfs>, ffi.Int)>>
      xSleep;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Double>)>> xCurrentTime;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3_vfs>, ffi.Int, ffi.Pointer<ffi.Char>)>>
      xGetLastError;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Int64>)>>
      xCurrentTimeInt64;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>
      xSetSystemCall;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> Function(
              ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Char>)>> xGetSystemCall;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<sqlite3_vfs>, ffi.Pointer<ffi.Char>)>>
      xNextSystemCall;
}

final class sqlite3_changegroup extends ffi.Opaque {}

final class sqlite3_changeset_iter extends ffi.Opaque {}

final class sqlite3_rebaser extends ffi.Opaque {}

final class sqlite3_session extends ffi.Opaque {}

abstract interface class SqliteLibrary {
  ffi.Pointer<sqlite3_char> get sqlite3_temp_directory;
  set sqlite3_temp_directory(ffi.Pointer<sqlite3_char> value);
  int sqlite3_initialize();
  int sqlite3_open_v2(
      ffi.Pointer<sqlite3_char> filename,
      ffi.Pointer<ffi.Pointer<sqlite3>> ppDb,
      int flags,
      ffi.Pointer<sqlite3_char> zVfs);
  int sqlite3_close_v2(ffi.Pointer<sqlite3> db);
  ffi.Pointer<sqlite3_char> sqlite3_db_filename(
      ffi.Pointer<sqlite3> db, ffi.Pointer<sqlite3_char> zDbName);
  ffi.Pointer<sqlite3_char> sqlite3_compileoption_get(int N);
  int sqlite3_extended_result_codes(ffi.Pointer<sqlite3> db, int onoff);
  int sqlite3_extended_errcode(ffi.Pointer<sqlite3> db);
  ffi.Pointer<sqlite3_char> sqlite3_errmsg(ffi.Pointer<sqlite3> db);
  ffi.Pointer<sqlite3_char> sqlite3_errstr(int code);
  int sqlite3_error_offset(ffi.Pointer<sqlite3> db);
  void sqlite3_free(ffi.Pointer<ffi.Void> ptr);
  ffi.Pointer<sqlite3_char> sqlite3_libversion();
  ffi.Pointer<sqlite3_char> sqlite3_sourceid();
  int sqlite3_libversion_number();
  int sqlite3_last_insert_rowid(ffi.Pointer<sqlite3> db);
  int sqlite3_changes(ffi.Pointer<sqlite3> db);
  int sqlite3_exec(
      ffi.Pointer<sqlite3> db,
      ffi.Pointer<sqlite3_char> sql,
      ffi.Pointer<ffi.Void> callback,
      ffi.Pointer<ffi.Void> argToCb,
      ffi.Pointer<ffi.Pointer<sqlite3_char>> errorOut);
  ffi.Pointer<ffi.Void> sqlite3_update_hook(
      ffi.Pointer<sqlite3> arg0,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Int,
                      ffi.Pointer<sqlite3_char>,
                      ffi.Pointer<sqlite3_char>,
                      ffi.Int64)>>
          arg1,
      ffi.Pointer<ffi.Void> arg2);
  ffi.Pointer<ffi.Void> sqlite3_commit_hook(
      ffi.Pointer<sqlite3> arg0,
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
          arg1,
      ffi.Pointer<ffi.Void> arg2);
  ffi.Pointer<ffi.Void> sqlite3_rollback_hook(
      ffi.Pointer<sqlite3> arg0,
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
          arg1,
      ffi.Pointer<ffi.Void> arg2);
  int sqlite3_get_autocommit(ffi.Pointer<sqlite3> db);
  int sqlite3_prepare_v2(
      ffi.Pointer<sqlite3> db,
      ffi.Pointer<sqlite3_char> zSql,
      int nByte,
      ffi.Pointer<ffi.Pointer<sqlite3_stmt>> ppStmt,
      ffi.Pointer<ffi.Pointer<sqlite3_char>> pzTail);
  int sqlite3_prepare_v3(
      ffi.Pointer<sqlite3> db,
      ffi.Pointer<sqlite3_char> zSql,
      int nByte,
      int prepFlags,
      ffi.Pointer<ffi.Pointer<sqlite3_stmt>> ppStmt,
      ffi.Pointer<ffi.Pointer<sqlite3_char>> pzTail);
  int sqlite3_finalize(ffi.Pointer<sqlite3_stmt> pStmt);
  int sqlite3_step(ffi.Pointer<sqlite3_stmt> pStmt);
  int sqlite3_reset(ffi.Pointer<sqlite3_stmt> pStmt);
  int sqlite3_stmt_isexplain(ffi.Pointer<sqlite3_stmt> pStmt);
  int sqlite3_stmt_readonly(ffi.Pointer<sqlite3_stmt> pStmt);
  int sqlite3_column_count(ffi.Pointer<sqlite3_stmt> pStmt);
  int sqlite3_bind_parameter_count(ffi.Pointer<sqlite3_stmt> pStmt);
  int sqlite3_bind_parameter_index(
      ffi.Pointer<sqlite3_stmt> arg0, ffi.Pointer<sqlite3_char> zName);
  ffi.Pointer<sqlite3_char> sqlite3_column_name(
      ffi.Pointer<sqlite3_stmt> pStmt, int N);
  ffi.Pointer<sqlite3_char> sqlite3_column_table_name(
      ffi.Pointer<sqlite3_stmt> pStmt, int N);
  int sqlite3_bind_blob64(ffi.Pointer<sqlite3_stmt> pStmt, int index,
      ffi.Pointer<ffi.Void> data, int length, ffi.Pointer<ffi.Void> destructor);
  int sqlite3_bind_double(
      ffi.Pointer<sqlite3_stmt> pStmt, int index, double data);
  int sqlite3_bind_int64(ffi.Pointer<sqlite3_stmt> pStmt, int index, int data);
  int sqlite3_bind_null(ffi.Pointer<sqlite3_stmt> pStmt, int index);
  int sqlite3_bind_text(
      ffi.Pointer<sqlite3_stmt> pStmt,
      int index,
      ffi.Pointer<sqlite3_char> data,
      int length,
      ffi.Pointer<ffi.Void> destructor);
  ffi.Pointer<ffi.Void> sqlite3_column_blob(
      ffi.Pointer<sqlite3_stmt> pStmt, int iCol);
  double sqlite3_column_double(ffi.Pointer<sqlite3_stmt> pStmt, int iCol);
  int sqlite3_column_int64(ffi.Pointer<sqlite3_stmt> pStmt, int iCol);
  ffi.Pointer<sqlite3_char> sqlite3_column_text(
      ffi.Pointer<sqlite3_stmt> pStmt, int iCol);
  int sqlite3_column_bytes(ffi.Pointer<sqlite3_stmt> pStmt, int iCol);
  int sqlite3_column_type(ffi.Pointer<sqlite3_stmt> pStmt, int iCol);
  ffi.Pointer<ffi.Void> sqlite3_value_blob(ffi.Pointer<sqlite3_value> value);
  double sqlite3_value_double(ffi.Pointer<sqlite3_value> value);
  int sqlite3_value_type(ffi.Pointer<sqlite3_value> value);
  int sqlite3_value_int64(ffi.Pointer<sqlite3_value> value);
  ffi.Pointer<sqlite3_char> sqlite3_value_text(
      ffi.Pointer<sqlite3_value> value);
  int sqlite3_value_bytes(ffi.Pointer<sqlite3_value> value);
  int sqlite3_value_subtype(ffi.Pointer<sqlite3_value> value);
  int sqlite3_create_function_v2(
      ffi.Pointer<sqlite3> db,
      ffi.Pointer<sqlite3_char> zFunctionName,
      int nArg,
      int eTextRep,
      ffi.Pointer<ffi.Void> pApp,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                      ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>
          xFunc,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                      ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>
          xStep,
      ffi.Pointer<
              ffi
              .NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_context>)>>
          xFinal,
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
          xDestroy);
  int sqlite3_create_window_function(
      ffi.Pointer<sqlite3> db,
      ffi.Pointer<sqlite3_char> zFunctionName,
      int nArg,
      int eTextRep,
      ffi.Pointer<ffi.Void> pApp,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                      ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>
          xStep,
      ffi.Pointer<
              ffi
              .NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_context>)>>
          xFinal,
      ffi.Pointer<
              ffi
              .NativeFunction<ffi.Void Function(ffi.Pointer<sqlite3_context>)>>
          xValue,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<sqlite3_context>, ffi.Int,
                      ffi.Pointer<ffi.Pointer<sqlite3_value>>)>>
          xInverse,
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
          xDestroy);
  ffi.Pointer<ffi.Void> sqlite3_aggregate_context(
      ffi.Pointer<sqlite3_context> ctx, int nBytes);
  ffi.Pointer<ffi.Void> sqlite3_user_data(ffi.Pointer<sqlite3_context> ctx);
  void sqlite3_result_blob64(ffi.Pointer<sqlite3_context> ctx,
      ffi.Pointer<ffi.Void> data, int length, ffi.Pointer<ffi.Void> destructor);
  void sqlite3_result_double(ffi.Pointer<sqlite3_context> ctx, double result);
  void sqlite3_result_error(ffi.Pointer<sqlite3_context> ctx,
      ffi.Pointer<sqlite3_char> msg, int length);
  void sqlite3_result_int64(ffi.Pointer<sqlite3_context> ctx, int result);
  void sqlite3_result_null(ffi.Pointer<sqlite3_context> ctx);
  void sqlite3_result_text(
      ffi.Pointer<sqlite3_context> ctx,
      ffi.Pointer<sqlite3_char> data,
      int length,
      ffi.Pointer<ffi.Void> destructor);
  void sqlite3_result_subtype(ffi.Pointer<sqlite3_context> ctx, int subtype);
  int sqlite3_create_collation_v2(
      ffi.Pointer<sqlite3> arg0,
      ffi.Pointer<sqlite3_char> zName,
      int eTextRep,
      ffi.Pointer<ffi.Void> pArg,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
                      ffi.Pointer<ffi.Void>, ffi.Int, ffi.Pointer<ffi.Void>)>>
          xCompare,
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
          xDestroy);
  ffi.Pointer<sqlite3_backup> sqlite3_backup_init(
      ffi.Pointer<sqlite3> pDestDb,
      ffi.Pointer<sqlite3_char> zDestDb,
      ffi.Pointer<sqlite3> pSrcDb,
      ffi.Pointer<sqlite3_char> zSrcDb);
  int sqlite3_backup_step(ffi.Pointer<sqlite3_backup> p, int nPage);
  int sqlite3_backup_finish(ffi.Pointer<sqlite3_backup> p);
  int sqlite3_backup_remaining(ffi.Pointer<sqlite3_backup> p);
  int sqlite3_backup_pagecount(ffi.Pointer<sqlite3_backup> p);
  int sqlite3_auto_extension(ffi.Pointer<ffi.Void> xEntryPoint);
  int sqlite3_db_config(
      ffi.Pointer<sqlite3> db, int op, int va, ffi.Pointer<ffi.Int> va$1);
  int sqlite3_vfs_register(ffi.Pointer<sqlite3_vfs> arg0, int makeDflt);
  int sqlite3_vfs_unregister(ffi.Pointer<sqlite3_vfs> arg0);
  int sqlite3changegroup_add(ffi.Pointer<sqlite3_changegroup> arg0, int nData,
      ffi.Pointer<ffi.Void> pData);
  int sqlite3changegroup_add_change(ffi.Pointer<sqlite3_changegroup> arg0,
      ffi.Pointer<sqlite3_changeset_iter> arg1);
  int sqlite3changeset_apply_strm(
      ffi.Pointer<sqlite3> db,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pIn,
                      ffi.Pointer<ffi.Void> pData,
                      ffi.Pointer<ffi.Int> pnData)>>
          xInput,
      ffi.Pointer<ffi.Void> pIn,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pCtx, ffi.Pointer<ffi.Char> zTab)>>
          xFilter,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pCtx,
                      ffi.Int eConflict,
                      ffi.Pointer<sqlite3_changeset_iter> p)>>
          xConflict,
      ffi.Pointer<ffi.Void> pCtx);
  int sqlite3changeset_apply_v2_strm(
      ffi.Pointer<sqlite3> db,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pIn,
                      ffi.Pointer<ffi.Void> pData,
                      ffi.Pointer<ffi.Int> pnData)>>
          xInput,
      ffi.Pointer<ffi.Void> pIn,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pCtx, ffi.Pointer<ffi.Char> zTab)>>
          xFilter,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pCtx,
                      ffi.Int eConflict,
                      ffi.Pointer<sqlite3_changeset_iter> p)>>
          xConflict,
      ffi.Pointer<ffi.Void> pCtx,
      ffi.Pointer<ffi.Pointer<ffi.Void>> ppRebase,
      ffi.Pointer<ffi.Int> pnRebase,
      int flags);
  int sqlite3changeset_concat_strm(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pIn,
                      ffi.Pointer<ffi.Void> pData,
                      ffi.Pointer<ffi.Int> pnData)>>
          xInputA,
      ffi.Pointer<ffi.Void> pInA,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pIn,
                      ffi.Pointer<ffi.Void> pData,
                      ffi.Pointer<ffi.Int> pnData)>>
          xInputB,
      ffi.Pointer<ffi.Void> pInB,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void> pOut,
                      ffi.Pointer<ffi.Void> pData, ffi.Int nData)>>
          xOutput,
      ffi.Pointer<ffi.Void> pOut);
  int sqlite3changeset_invert_strm(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pIn,
                      ffi.Pointer<ffi.Void> pData,
                      ffi.Pointer<ffi.Int> pnData)>>
          xInput,
      ffi.Pointer<ffi.Void> pIn,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void> pOut,
                      ffi.Pointer<ffi.Void> pData, ffi.Int nData)>>
          xOutput,
      ffi.Pointer<ffi.Void> pOut);
  int sqlite3changeset_start_strm(
      ffi.Pointer<ffi.Pointer<sqlite3_changeset_iter>> pp,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pIn,
                      ffi.Pointer<ffi.Void> pData,
                      ffi.Pointer<ffi.Int> pnData)>>
          xInput,
      ffi.Pointer<ffi.Void> pIn);
  int sqlite3changeset_start_v2_strm(
      ffi.Pointer<ffi.Pointer<sqlite3_changeset_iter>> pp,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pIn,
                      ffi.Pointer<ffi.Void> pData,
                      ffi.Pointer<ffi.Int> pnData)>>
          xInput,
      ffi.Pointer<ffi.Void> pIn,
      int flags);
  int sqlite3session_changeset_strm(
      ffi.Pointer<sqlite3_session> pSession,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void> pOut,
                      ffi.Pointer<ffi.Void> pData, ffi.Int nData)>>
          xOutput,
      ffi.Pointer<ffi.Void> pOut);
  int sqlite3session_patchset_strm(
      ffi.Pointer<sqlite3_session> pSession,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void> pOut,
                      ffi.Pointer<ffi.Void> pData, ffi.Int nData)>>
          xOutput,
      ffi.Pointer<ffi.Void> pOut);
  int sqlite3changegroup_add_strm(
      ffi.Pointer<sqlite3_changegroup> arg0,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pIn,
                      ffi.Pointer<ffi.Void> pData,
                      ffi.Pointer<ffi.Int> pnData)>>
          xInput,
      ffi.Pointer<ffi.Void> pIn);
  int sqlite3changegroup_output_strm(
      ffi.Pointer<sqlite3_changegroup> arg0,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void> pOut,
                      ffi.Pointer<ffi.Void> pData, ffi.Int nData)>>
          xOutput,
      ffi.Pointer<ffi.Void> pOut);
  int sqlite3rebaser_rebase_strm(
      ffi.Pointer<sqlite3_rebaser> pRebaser,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pIn,
                      ffi.Pointer<ffi.Void> pData,
                      ffi.Pointer<ffi.Int> pnData)>>
          xInput,
      ffi.Pointer<ffi.Void> pIn,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void> pOut,
                      ffi.Pointer<ffi.Void> pData, ffi.Int nData)>>
          xOutput,
      ffi.Pointer<ffi.Void> pOut);
  void sqlite3changegroup_delete(ffi.Pointer<sqlite3_changegroup> arg0);
  int sqlite3changegroup_new(ffi.Pointer<ffi.Pointer<sqlite3_changegroup>> pp);
  int sqlite3changegroup_output(ffi.Pointer<sqlite3_changegroup> arg0,
      ffi.Pointer<ffi.Int> pnData, ffi.Pointer<ffi.Pointer<ffi.Void>> ppData);
  int sqlite3changegroup_schema(ffi.Pointer<sqlite3_changegroup> arg0,
      ffi.Pointer<sqlite3> arg1, ffi.Pointer<ffi.Char> zDb);
  int sqlite3changeset_apply(
      ffi.Pointer<sqlite3> db,
      int nChangeset,
      ffi.Pointer<ffi.Void> pChangeset,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pCtx, ffi.Pointer<ffi.Char> zTab)>>
          xFilter,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pCtx,
                      ffi.Int eConflict,
                      ffi.Pointer<sqlite3_changeset_iter> p)>>
          xConflict,
      ffi.Pointer<ffi.Void> pCtx);
  int sqlite3changeset_apply_v2(
      ffi.Pointer<sqlite3> db,
      int nChangeset,
      ffi.Pointer<ffi.Void> pChangeset,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pCtx, ffi.Pointer<ffi.Char> zTab)>>
          xFilter,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pCtx,
                      ffi.Int eConflict,
                      ffi.Pointer<sqlite3_changeset_iter> p)>>
          xConflict,
      ffi.Pointer<ffi.Void> pCtx,
      ffi.Pointer<ffi.Pointer<ffi.Void>> ppRebase,
      ffi.Pointer<ffi.Int> pnRebase,
      int flags);
  int sqlite3changeset_concat(
      int nA,
      ffi.Pointer<ffi.Void> pA,
      int nB,
      ffi.Pointer<ffi.Void> pB,
      ffi.Pointer<ffi.Int> pnOut,
      ffi.Pointer<ffi.Pointer<ffi.Void>> ppOut);
  int sqlite3changeset_conflict(ffi.Pointer<sqlite3_changeset_iter> pIter,
      int iVal, ffi.Pointer<ffi.Pointer<sqlite3_value>> ppValue);
  int sqlite3changeset_finalize(ffi.Pointer<sqlite3_changeset_iter> pIter);
  int sqlite3changeset_fk_conflicts(
      ffi.Pointer<sqlite3_changeset_iter> pIter, ffi.Pointer<ffi.Int> pnOut);
  int sqlite3changeset_invert(int nIn, ffi.Pointer<ffi.Void> pIn,
      ffi.Pointer<ffi.Int> pnOut, ffi.Pointer<ffi.Pointer<ffi.Void>> ppOut);
  int sqlite3changeset_new(ffi.Pointer<sqlite3_changeset_iter> pIter, int iVal,
      ffi.Pointer<ffi.Pointer<sqlite3_value>> ppValue);
  int sqlite3changeset_next(ffi.Pointer<sqlite3_changeset_iter> pIter);
  int sqlite3changeset_old(ffi.Pointer<sqlite3_changeset_iter> pIter, int iVal,
      ffi.Pointer<ffi.Pointer<sqlite3_value>> ppValue);
  int sqlite3changeset_op(
      ffi.Pointer<sqlite3_changeset_iter> pIter,
      ffi.Pointer<ffi.Pointer<ffi.Char>> pzTab,
      ffi.Pointer<ffi.Int> pnCol,
      ffi.Pointer<ffi.Int> pOp,
      ffi.Pointer<ffi.Int> pbIndirect);
  int sqlite3changeset_pk(
      ffi.Pointer<sqlite3_changeset_iter> pIter,
      ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> pabPK,
      ffi.Pointer<ffi.Int> pnCol);
  int sqlite3changeset_start(
      ffi.Pointer<ffi.Pointer<sqlite3_changeset_iter>> pp,
      int nChangeset,
      ffi.Pointer<ffi.Void> pChangeset);
  int sqlite3changeset_start_v2(
      ffi.Pointer<ffi.Pointer<sqlite3_changeset_iter>> pp,
      int nChangeset,
      ffi.Pointer<ffi.Void> pChangeset,
      int flags);
  int sqlite3changeset_upgrade(
      ffi.Pointer<sqlite3> db,
      ffi.Pointer<ffi.Char> zDb,
      int nIn,
      ffi.Pointer<ffi.Void> pIn,
      ffi.Pointer<ffi.Int> pnOut,
      ffi.Pointer<ffi.Pointer<ffi.Void>> ppOut);
  int sqlite3rebaser_configure(ffi.Pointer<sqlite3_rebaser> arg0, int nRebase,
      ffi.Pointer<ffi.Void> pRebase);
  int sqlite3rebaser_create(ffi.Pointer<ffi.Pointer<sqlite3_rebaser>> ppNew);
  void sqlite3rebaser_delete(ffi.Pointer<sqlite3_rebaser> p);
  int sqlite3rebaser_rebase(
      ffi.Pointer<sqlite3_rebaser> arg0,
      int nIn,
      ffi.Pointer<ffi.Void> pIn,
      ffi.Pointer<ffi.Int> pnOut,
      ffi.Pointer<ffi.Pointer<ffi.Void>> ppOut);
  int sqlite3session_attach(
      ffi.Pointer<sqlite3_session> pSession, ffi.Pointer<ffi.Char> zTab);
  int sqlite3session_changeset(
      ffi.Pointer<sqlite3_session> pSession,
      ffi.Pointer<ffi.Int> pnChangeset,
      ffi.Pointer<ffi.Pointer<ffi.Void>> ppChangeset);
  int sqlite3session_changeset_size(ffi.Pointer<sqlite3_session> pSession);
  int sqlite3session_config(int op, ffi.Pointer<ffi.Void> pArg);
  int sqlite3session_create(ffi.Pointer<sqlite3> db, ffi.Pointer<ffi.Char> zDb,
      ffi.Pointer<ffi.Pointer<sqlite3_session>> ppSession);
  void sqlite3session_delete(ffi.Pointer<sqlite3_session> pSession);
  int sqlite3session_diff(
      ffi.Pointer<sqlite3_session> pSession,
      ffi.Pointer<ffi.Char> zFromDb,
      ffi.Pointer<ffi.Char> zTbl,
      ffi.Pointer<ffi.Pointer<ffi.Char>> pzErrMsg);
  int sqlite3session_enable(ffi.Pointer<sqlite3_session> pSession, int bEnable);
  int sqlite3session_indirect(
      ffi.Pointer<sqlite3_session> pSession, int bIndirect);
  int sqlite3session_isempty(ffi.Pointer<sqlite3_session> pSession);
  int sqlite3session_memory_used(ffi.Pointer<sqlite3_session> pSession);
  int sqlite3session_object_config(
      ffi.Pointer<sqlite3_session> arg0, int op, ffi.Pointer<ffi.Void> pArg);
  int sqlite3session_patchset(
      ffi.Pointer<sqlite3_session> pSession,
      ffi.Pointer<ffi.Int> pnPatchset,
      ffi.Pointer<ffi.Pointer<ffi.Void>> ppPatchset);
  void sqlite3session_table_filter(
      ffi.Pointer<sqlite3_session> pSession,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void> pCtx, ffi.Pointer<ffi.Char> zTab)>>
          xFilter,
      ffi.Pointer<ffi.Void> pCtx);
}
